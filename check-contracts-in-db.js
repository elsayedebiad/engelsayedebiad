// ุงูุชุญูู ูู ุงูุชุนุงูุฏุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
const sqlite3 = require('sqlite3').verbose()
const path = require('path')

async function checkContractsInDB() {
  try {
    console.log('๐ ุงูุชุญูู ูู ุงูุชุนุงูุฏุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...\n')

    const dbPath = path.join(__dirname, 'prisma', 'dev.db')
    const db = new sqlite3.Database(dbPath)

    // ุนุฑุถ ุฌููุน ุงูุชุนุงูุฏุงุช ูุน ุจูุงูุงุช ุงูุณูุฑ
    db.all(`
      SELECT 
        c.id as contractId,
        c.cvId,
        c.identityNumber,
        c.contractStartDate,
        c.createdAt,
        cv.fullName,
        cv.referenceCode,
        cv.nationality,
        cv.position,
        cv.status
      FROM contracts c
      LEFT JOIN cvs cv ON c.cvId = cv.id
      ORDER BY c.createdAt DESC
    `, (err, contracts) => {
      if (err) {
        console.error('โ ุฎุทุฃ ูู ูุฑุงุกุฉ ุงูุชุนุงูุฏุงุช:', err)
        db.close()
        return
      }

      console.log(`๐ ุนุฏุฏ ุงูุชุนุงูุฏุงุช ุงูููุฌูุฏุฉ: ${contracts.length}`)

      if (contracts.length === 0) {
        console.log('โ ูุง ุชูุฌุฏ ุชุนุงูุฏุงุช ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช')
      } else {
        console.log('\n๐ ุชูุงุตูู ุงูุชุนุงูุฏุงุช:')
        console.log('='.repeat(80))
        
        contracts.forEach((contract, index) => {
          console.log(`\n${index + 1}. ุงูุชุนุงูุฏ ุฑูู: ${contract.contractId}`)
          console.log(`   ๐ค ุงูุงุณู: ${contract.fullName || 'ุบูุฑ ูุญุฏุฏ'}`)
          console.log(`   ๐ ุฑูู ุงููููุฉ: ${contract.identityNumber}`)
          console.log(`   ๐ณ๏ธ ุงูุฌูุณูุฉ: ${contract.nationality || 'ุบูุฑ ูุญุฏุฏ'}`)
          console.log(`   ๐ผ ุงููุธููุฉ: ${contract.position || 'ุบูุฑ ูุญุฏุฏ'}`)
          console.log(`   ๐ ุงูููุฏ ุงููุฑุฌุนู: ${contract.referenceCode || 'ุบูุฑ ูุญุฏุฏ'}`)
          console.log(`   ๐ ุญุงูุฉ ุงูุณูุฑุฉ: ${contract.status}`)
          console.log(`   ๐ ุชุงุฑูุฎ ุงูุชุนุงูุฏ: ${contract.contractStartDate}`)
          console.log(`   ๐ ุชุงุฑูุฎ ุงูุฅูุดุงุก: ${contract.createdAt}`)
        })
      }

      // ุงูุชุญูู ูู ุญุงูุงุช ุงูุณูุฑ
      console.log('\n๐ ุฅุญุตุงุฆูุงุช ุงูุณูุฑ:')
      console.log('='.repeat(40))

      db.get("SELECT COUNT(*) as count FROM cvs WHERE status = 'HIRED'", (err, result) => {
        if (!err) {
          console.log(`โ ุงูุณูุฑ ุงููุชุนุงูุฏ ุนูููุง: ${result.count}`)
        }

        db.get("SELECT COUNT(*) as count FROM cvs WHERE status = 'NEW'", (err, result) => {
          if (!err) {
            console.log(`๐ ุงูุณูุฑ ุงููุชุงุญุฉ: ${result.count}`)
          }

          db.get("SELECT COUNT(*) as count FROM contracts", (err, result) => {
            if (!err) {
              console.log(`๐ผ ุฅุฌูุงูู ุงูุชุนุงูุฏุงุช: ${result.count}`)
            }

            console.log('\n๐ ูููุตูู ููุชุนุงูุฏุงุช:')
            console.log('1. ุณุฌู ุฏุฎูู ูู ุงูุฏุงุดุจูุฑุฏ')
            console.log('2. ุงุฐูุจ ูุตูุญุฉ ุงูุชุนุงูุฏุงุช')
            console.log('3. http://localhost:3000/dashboard/contracts')

            db.close()
          })
        })
      })
    })

  } catch (error) {
    console.error('โ ุฎุทุฃ ุนุงู:', error)
  }
}

checkContractsInDB()
