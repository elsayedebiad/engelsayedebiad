const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function checkImageData() {
  try {
    console.log('๐ ูุญุต ุจูุงูุงุช ุงูุตูุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช...')

    const cvsWithImages = await prisma.cV.findMany({
      where: {
        profileImage: {
          not: null,
          not: '',
        },
      },
      take: 10,
      select: {
        id: true,
        fullName: true,
        profileImage: true,
      },
    })

    if (cvsWithImages.length === 0) {
      console.log('ูุง ุชูุฌุฏ ุฃู ุณูุฑ ุฐุงุชูุฉ ุชุญุชูู ุนูู ุตูุฑ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช.')
      return
    }

    console.log(`\nโ ููุฌุฏ ${cvsWithImages.length} ุณูุฑุฉ ุฐุงุชูุฉ ุชุญุชูู ุนูู ุตูุฑ. ุฅููู ุนููุฉ ูููุง:`)
    cvsWithImages.forEach(cv => {
      console.log(`\n- ุงูุงุณู: ${cv.fullName}`)
      console.log(`  ูุณุงุฑ ุงูุตูุฑุฉ: ${cv.profileImage}`)
      
      if (cv.profileImage && cv.profileImage.startsWith('/uploads/images/')) {
        console.log(`  ุงูุชูุณูู: โ ุตุญูุญ (ูุณุงุฑ ูุณุจู)`)
      } else {
        console.log(`  ุงูุชูุณูู: โ ุฎุงุทุฆ - ูุฌุจ ุฃู ูุจุฏุฃ ุงููุณุงุฑ ุจู /uploads/images/`)
      }
    })

  } catch (error) {
    console.error('โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุญุต ุจูุงูุงุช ุงูุตูุฑ:', error)
  } finally {
    await prisma.$disconnect()
  }
}

checkImageData()
